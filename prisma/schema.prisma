generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model NFT {
  id                    Int     @id @default(autoincrement())
  title                 String
  image                 String
  tokenId               String
  totalPrice            Float
  stackingPrice         Float
  totalSupply           Float
  supply                Float
  collectionSlug        String
  collectionDescription String
  tokenName             String
  comingSoon            Boolean @default(false)
}

model NFTData {
  id             Int    @id @default(autoincrement())
  tokenId        String
  collectionSlug String
  userPrice      String
  userAddress    String
}

model Map {
  id     Int    @id @default(autoincrement())
  wallet String @unique
  lat    String
  lng    String
}

model User {
  id          Int           @id @default(autoincrement())
  wallet      String        @unique
  name        String
  mbucBalance String        @default("")
  isApproval  Boolean       @default(false)
  claimReward ClaimReward[]
  inventory   Product[]
  createdAt   DateTime      @default(now())
}

model Product {
  id           Int      @id @default(autoincrement())
  productId    String
  alreadyClaim Boolean
  authorId     String
  quantity     Int      @default(1)
  oldContract  Boolean  @default(false)
  owner        User     @relation(fields: [authorId], references: [wallet])
  createdAt    DateTime @default(now())
}

model RaffleWinner {
  id        Int    @id @default(autoincrement())
  productId String @unique
  winner    String
}

model ClaimReward {
  id           Int    @id @default(autoincrement())
  productId    String
  firstName    String @default("")
  lastName     String @default("")
  address      String @default("")
  zip          String @default("")
  city         String @default("")
  country      String @default("")
  clothingSize String @default("")
  email        String @default("")
  userId       String
  owner        User   @relation(fields: [userId], references: [wallet])
}

model strapi_database_schema {
  id     Int       @id @default(autoincrement())
  schema Json?     @db.Json
  time   DateTime? @db.Timestamp(6)
  hash   String?   @db.VarChar(255)
}

model strapi_migrations {
  id   Int       @id @default(autoincrement())
  name String?   @db.VarChar(255)
  time DateTime? @db.Timestamp(6)
}

model ContentUpload {
  id               Int     @id @default(autoincrement())
  order            Int     @default(autoincrement())
  title            String  @default("")
  video            String  @default("")
  mobileThumnail   String  @default("")
  desktopThumbnail String  @default("")
  active           Boolean @default(true)
  speaker          String?
  category         String  @default("podcast")
  description      String  @default("")
  duration         String  @default("")
}

model Courses {
  id          Int     @id @default(autoincrement())
  order       Int     @default(autoincrement())
  title       String  @default("")
  link        String  @default("")
  active      Boolean @default(true)
  type        String  @default("video") // "video" | "pdf" | "doc"
  category    String  @default("")
  description String  @default("")
  duration    String  @default("")
}

model Trait {
  id                String  @id @unique
  category          String // back-accessories | background | clothes | ears-wear | eyes | face-accessories | hair | rare | skin
  asset             String
  originalSupply    Int
  cost              Float
  totalShopQuantity Int     @default(0)
  shopQuantity      Int     @default(0)
  imagePath         String
  active            Boolean @default(false)
}

model TraitShop {
  order         String   @id @unique
  address       String
  request       String[]
  description   String?
  adminNote     String?
  total         Float    @default(0.00)
  isApproved    Boolean?
  token         Int      @default(0)
  paymentStatus String   @default("pending") // pending | paid | failed
  createdAt     DateTime @default(now())
}
